name: Integration Build and Release

on:
  issue_comment:
    types: [created]

jobs:
  process-comment:
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '/build integration=') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write # Added permission for commenting on issues

    steps:
      - name: Extract integration name
        id: extract
        run: |
          COMMENT="${{ github.event.comment.body }}"
          INTEGRATION=$(echo "$COMMENT" | grep -oP '/build integration=\K[^\s]+')
          if [ -z "$INTEGRATION" ]; then
            echo "Error: Could not extract integration name from comment"
            exit 1
          fi
          echo "integration=$INTEGRATION" >> $GITHUB_OUTPUT
          echo "Integration to build: $INTEGRATION"

      - name: Add reaction to comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PUSH_TOKEN }}
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            });

            // Add a reply by updating the triggering comment
            const commentId = context.payload.comment.id;
            const existingComment = await github.rest.issues.getComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId
            });

            const updatedBody = existingComment.data.body + '\n\nüëÄ Seen! Integration deployment has started for `${{ steps.extract.outputs.integration }}`';

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: updatedBody
            });

      - name: Get PR details
        id: pr_details
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PUSH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.payload.issue.number;

            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: issue_number
            });

            const branch = pr.data.head.ref;
            console.log(`PR branch: ${branch}`);
            return branch;

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJSON(steps.pr_details.outputs.result) }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        run: corepack enable && corepack prepare pnpm@latest --activate

      - name: Validate integration directory
        run: |
          INTEGRATION_DIR="integrations/${{ steps.extract.outputs.integration }}"
          if [ ! -d "$INTEGRATION_DIR" ]; then
            echo "Error: Integration directory $INTEGRATION_DIR does not exist"
            exit 1
          fi

      - name: Get integration version
        id: version
        run: |
          INTEGRATION_DIR="integrations/${{ steps.extract.outputs.integration }}"
          if [ ! -f "$INTEGRATION_DIR/package.json" ]; then
            echo "Error: package.json not found in $INTEGRATION_DIR"
            exit 1
          fi
          VERSION=$(node -p "require('./$INTEGRATION_DIR/package.json').version")
          if [ -z "$VERSION" ]; then
            echo "Error: Could not extract version from package.json"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Integration version: $VERSION"

      - name: Setup Google Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"
        with:
          version: ">= 363.0.0"

      - name: Check if version already exists
        id: check_version
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PUSH_TOKEN }}
          script: |
            const integration = '${{ steps.extract.outputs.integration }}';
            const version = '${{ steps.version.outputs.version }}';
            const octokit = github.rest;
            const { execSync } = require('child_process');

            const commentId = context.payload.comment.id;
            const existingComment = await github.rest.issues.getComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId
            });

            return new Promise((resolve) => {
              try {
                const stdout = execSync(`gsutil ls gs://integrations/${integration}/${version}`).toString();
                if (stdout.trim()) {
                  core.setFailed('Version already exists in bucket');
                  
                  // Update the triggering comment with failure message
                  const updatedBody = existingComment.data.body + `\n\n‚ö†Ô∏è Build failed: Version ${version} of ${integration} integration already exists in bucket`;
                  github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: commentId,
                    body: updatedBody
                  });
                  
                  resolve('exists');
                }
              } catch (err) {
                // Version doesn't exist, which is what we want
                // Update the triggering comment with success message
                const updatedBody = existingComment.data.body + `\n\n‚úÖ Version ${version} of ${integration} integration doesn't exist yet. Proceeding with build and upload.`;
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: commentId,
                  body: updatedBody
                });
                
                resolve('not_exists');
              }
            });

      - name: Install dependencies
        if: steps.check_version.outputs.result != 'exists'
        run: |
          cd integrations/${{ steps.extract.outputs.integration }}
          pnpm install --ignore-workspace --no-frozen-lockfile
          npm i -g @vercel/ncc
          if [ $? -ne 0 ]; then
            echo "Error: Dependencies installation failed"
            exit 1
          fi

      - name: Build integration
        if: steps.check_version.outputs.result != 'exists'
        run: |
          cd integrations/${{ steps.extract.outputs.integration }}
          pnpm build
          if [ $? -ne 0 ]; then
            echo "Error: Build failed"
            exit 1
          fi

      - name: Upload to GCP bucket
        if: steps.check_version.outputs.result != 'exists'
        run: |
          INTEGRATION="${{ steps.extract.outputs.integration }}"
          VERSION="${{ steps.version.outputs.version }}"
          DIST_DIR="integrations/$INTEGRATION/dist"

          if [ ! -d "$DIST_DIR" ]; then
            echo "Error: Dist directory $DIST_DIR does not exist after build"
            exit 1
          fi

          # Upload files
          gsutil -m cp -r "$DIST_DIR"/* gs://sigma-agents/$INTEGRATION/$VERSION/

          # Verify upload was successful
          gsutil ls gs://sigma-agents/$INTEGRATION/$VERSION/ || { echo "Error: Upload verification failed"; exit 1; }

      - name: Comment on PR
        if: steps.check_version.outputs.result != 'exists'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PUSH_TOKEN }}
          script: |
            const integration = '${{ steps.extract.outputs.integration }}';
            const version = '${{ steps.version.outputs.version }}';

            const commentId = context.payload.comment.id;
            const existingComment = await github.rest.issues.getComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId
            });

            const updatedBody = existingComment.data.body + `\n\n‚úÖ Successfully built and uploaded ${integration} integration v${version} to GCP bucket`;

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: updatedBody
            });

            // Add a tick reaction to the comment
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              content: '+1'
            });
